// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.tsoy.emrmock.domain;

import com.tsoy.emrmock.domain.CNA_Record;
import com.tsoy.emrmock.domain.CNA_RecordDataOnDemand;
import com.tsoy.emrmock.domain.patients.PatientInfo;
import com.tsoy.emrmock.utils.ActivitiesOfDailyLivining;
import com.tsoy.emrmock.utils.FluidIntake;
import com.tsoy.emrmock.utils.FluidOutput;
import com.tsoy.emrmock.utils.FoodIntake;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect CNA_RecordDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CNA_RecordDataOnDemand: @Component;
    
    private Random CNA_RecordDataOnDemand.rnd = new SecureRandom();
    
    private List<CNA_Record> CNA_RecordDataOnDemand.data;
    
    public CNA_Record CNA_RecordDataOnDemand.getNewTransientCNA_Record(int index) {
        CNA_Record obj = new CNA_Record();
        setActivities(obj, index);
        setBowelMovement(obj, index);
        setCreatedDate(obj, index);
        setFluidIntake(obj, index);
        setFluidOutput(obj, index);
        setFoodIntake(obj, index);
        setPatient(obj, index);
        return obj;
    }
    
    public void CNA_RecordDataOnDemand.setActivities(CNA_Record obj, int index) {
        ActivitiesOfDailyLivining activities = null;
        obj.setActivities(activities);
    }
    
    public void CNA_RecordDataOnDemand.setBowelMovement(CNA_Record obj, int index) {
        String BowelMovement = "BowelMovement_" + index;
        obj.setBowelMovement(BowelMovement);
    }
    
    public void CNA_RecordDataOnDemand.setCreatedDate(CNA_Record obj, int index) {
        Date CreatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(CreatedDate);
    }
    
    public void CNA_RecordDataOnDemand.setFluidIntake(CNA_Record obj, int index) {
        FluidIntake FluidIntake = null;
        obj.setFluidIntake(FluidIntake);
    }
    
    public void CNA_RecordDataOnDemand.setFluidOutput(CNA_Record obj, int index) {
        FluidOutput FluidOutput = null;
        obj.setFluidOutput(FluidOutput);
    }
    
    public void CNA_RecordDataOnDemand.setFoodIntake(CNA_Record obj, int index) {
        FoodIntake FoodIntake = null;
        obj.setFoodIntake(FoodIntake);
    }
    
    public void CNA_RecordDataOnDemand.setPatient(CNA_Record obj, int index) {
        PatientInfo patient = null;
        obj.setPatient(patient);
    }
    
    public CNA_Record CNA_RecordDataOnDemand.getSpecificCNA_Record(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        CNA_Record obj = data.get(index);
        Long id = obj.getId();
        return CNA_Record.findCNA_Record(id);
    }
    
    public CNA_Record CNA_RecordDataOnDemand.getRandomCNA_Record() {
        init();
        CNA_Record obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return CNA_Record.findCNA_Record(id);
    }
    
    public boolean CNA_RecordDataOnDemand.modifyCNA_Record(CNA_Record obj) {
        return false;
    }
    
    public void CNA_RecordDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = CNA_Record.findCNA_RecordEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'CNA_Record' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<CNA_Record>();
        for (int i = 0; i < 10; i++) {
            CNA_Record obj = getNewTransientCNA_Record(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
