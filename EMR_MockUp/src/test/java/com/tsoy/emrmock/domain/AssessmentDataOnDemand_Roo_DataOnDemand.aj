// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.tsoy.emrmock.domain;

import com.tsoy.emrmock.domain.Assessment;
import com.tsoy.emrmock.domain.AssessmentDataOnDemand;
import com.tsoy.emrmock.domain.patients.PatientInfo;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect AssessmentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AssessmentDataOnDemand: @Component;
    
    private Random AssessmentDataOnDemand.rnd = new SecureRandom();
    
    private List<Assessment> AssessmentDataOnDemand.data;
    
    public Assessment AssessmentDataOnDemand.getNewTransientAssessment(int index) {
        Assessment obj = new Assessment();
        setBehavior(obj, index);
        setCardioSystem(obj, index);
        setCreatedDate(obj, index);
        setDigestiveSystem(obj, index);
        setEndocrineSystem(obj, index);
        setMuscularSystem(obj, index);
        setNervousSystem(obj, index);
        setPatient(obj, index);
        setRespiratorySystem(obj, index);
        setUrinarySystem(obj, index);
        setVitalSigns(obj, index);
        return obj;
    }
    
    public void AssessmentDataOnDemand.setBehavior(Assessment obj, int index) {
        String Behavior = "Behavior_" + index;
        obj.setBehavior(Behavior);
    }
    
    public void AssessmentDataOnDemand.setCardioSystem(Assessment obj, int index) {
        String CardioSystem = "CardioSystem_" + index;
        obj.setCardioSystem(CardioSystem);
    }
    
    public void AssessmentDataOnDemand.setCreatedDate(Assessment obj, int index) {
        Date CreatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(CreatedDate);
    }
    
    public void AssessmentDataOnDemand.setDigestiveSystem(Assessment obj, int index) {
        String DigestiveSystem = "DigestiveSystem_" + index;
        obj.setDigestiveSystem(DigestiveSystem);
    }
    
    public void AssessmentDataOnDemand.setEndocrineSystem(Assessment obj, int index) {
        String EndocrineSystem = "EndocrineSystem_" + index;
        obj.setEndocrineSystem(EndocrineSystem);
    }
    
    public void AssessmentDataOnDemand.setMuscularSystem(Assessment obj, int index) {
        String MuscularSystem = "MuscularSystem_" + index;
        obj.setMuscularSystem(MuscularSystem);
    }
    
    public void AssessmentDataOnDemand.setNervousSystem(Assessment obj, int index) {
        String NervousSystem = "NervousSystem_" + index;
        obj.setNervousSystem(NervousSystem);
    }
    
    public void AssessmentDataOnDemand.setPatient(Assessment obj, int index) {
        PatientInfo patient = null;
        obj.setPatient(patient);
    }
    
    public void AssessmentDataOnDemand.setRespiratorySystem(Assessment obj, int index) {
        String RespiratorySystem = "RespiratorySystem_" + index;
        obj.setRespiratorySystem(RespiratorySystem);
    }
    
    public void AssessmentDataOnDemand.setUrinarySystem(Assessment obj, int index) {
        String UrinarySystem = "UrinarySystem_" + index;
        obj.setUrinarySystem(UrinarySystem);
    }
    
    public void AssessmentDataOnDemand.setVitalSigns(Assessment obj, int index) {
        String VitalSigns = "VitalSigns_" + index;
        obj.setVitalSigns(VitalSigns);
    }
    
    public Assessment AssessmentDataOnDemand.getSpecificAssessment(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Assessment obj = data.get(index);
        Long id = obj.getId();
        return Assessment.findAssessment(id);
    }
    
    public Assessment AssessmentDataOnDemand.getRandomAssessment() {
        init();
        Assessment obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Assessment.findAssessment(id);
    }
    
    public boolean AssessmentDataOnDemand.modifyAssessment(Assessment obj) {
        return false;
    }
    
    public void AssessmentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Assessment.findAssessmentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Assessment' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Assessment>();
        for (int i = 0; i < 10; i++) {
            Assessment obj = getNewTransientAssessment(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
